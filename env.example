# ============================================
# NOTE TAKING APP - ENVIRONMENT CONFIGURATION
# ============================================
# Copy this file to .env and update with your values
# DO NOT commit .env file to version control

# ============================================
# APPLICATION
# ============================================
# Application environment (development, production, test)
NODE_ENV=development

# Server port
PORT=8080

# ============================================
# DATABASE
# ============================================
# MongoDB connection string
# Format: mongodb://[username:password@]host[:port][/database][?options]
MONGODB_URI=mongodb://localhost:27017/note-taking-app

# ============================================
# JWT AUTHENTICATION
# ============================================
# Secret key for signing access tokens (REQUIRED - change in production!)
# Use a strong random string (min 32 characters recommended)
JWT_SECRET=your-super-secret-jwt-key-here-change-in-production-min-32-chars

# Secret key for signing refresh tokens (REQUIRED - change in production!)
# Use a different strong random string from JWT_SECRET
JWT_REFRESH_SECRET=your-super-secret-refresh-key-here-change-in-production-min-32-chars

# Token expiration times
# Access token expiry (short-lived: 15m, 1h, etc.)
JWT_ACCESS_EXPIRY=15m

# Refresh token expiry (long-lived: 7d, 30d, etc.)
JWT_REFRESH_EXPIRY=7d

# ============================================
# CORS CONFIGURATION
# ============================================
# Allowed origins for CORS (comma-separated list)
# Use '*' to allow all origins (not recommended for production)
# Example: https://yourdomain.com,https://app.yourdomain.com
CORS_ORIGIN=http://localhost:3000,http://localhost:3001,http://127.0.0.1:3000

# ============================================
# REDIS CACHE (Optional)
# ============================================
# Redis connection URL
# Format: redis://[username:password@]host[:port][/database]
REDIS_URL=redis://localhost:6379

# Enable/disable Redis caching (true/false)
# Set to 'false' to disable Redis and use MongoDB only
REDIS_ENABLED=true

# ============================================
# EMAIL SERVICE (Optional)
# ============================================
# SendGrid API key for sending emails
# Get your API key from: https://app.sendgrid.com/settings/api_keys
# Leave empty or use dummy value to disable email sending
SENDGRID_API_KEY=SG.your-sendgrid-api-key-here

# From email address for outgoing emails
FROM_EMAIL=noreply@yourdomain.com

# From name for outgoing emails
FROM_NAME=Note Taking App

# ============================================
# NOTES
# ============================================
# 1. Generate strong secrets:
#    - Node.js: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
#    - OpenSSL: openssl rand -hex 32
#
# 2. Production checklist:
#    ✓ Change JWT_SECRET and JWT_REFRESH_SECRET
#    ✓ Use MongoDB Atlas or production database
#    ✓ Configure proper CORS_ORIGIN
#    ✓ Set NODE_ENV=production
#    ✓ Use Cloud Memorystore or production Redis
#    ✓ Add valid SendGrid API key
#
# 3. Cloud Run deployment:
#    - All secrets should be stored in Google Secret Manager
#    - Use scripts/setup-secrets.ps1 to create secrets
#    - See docs/CLOUD_RUN_DEPLOYMENT.md for details
